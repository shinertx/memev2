version: '3.9'

x-rust-common: &rust-common
  build:
    context: .
    dockerfile: Dockerfile.rust
    cache_from:
      - type=registry,ref=ghcr.io/meme-snipe/rust-cache:latest
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"
  networks:
    - memesnipe
  env_file:
    - .env
  deploy:
    resources:
      limits:
        memory: 2G
        cpus: '2'
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100M

x-python-common: &python-common
  build:
    context: .
    dockerfile: Dockerfile.python
    cache_from:
      - type=registry,ref=ghcr.io/meme-snipe/python-cache:latest
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"
  networks:
    - memesnipe
  env_file:
    - .env
  deploy:
    resources:
      limits:
        memory: 1G
        cpus: '1'
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=50M

services:
  # Core Infrastructure
  redis:
    image: redis:7.2-alpine
    container_name: memesnipe-redis
    command: >
      redis-server
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data:rw
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - memesnipe
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # Rust Services
  executor:
    <<: *rust-common
    container_name: memesnipe-executor
    build:
      args:
        SERVICE_NAME: executor
    volumes:
      - trades-db:/app/shared:rw
    ports:
      - "127.0.0.1:9091:9090"
    depends_on:
      redis:
        condition: service_healthy
      risk_guardian:
        condition: service_healthy
      wallet_guard:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3

  autonomous_allocator:
    <<: *rust-common
    container_name: memesnipe-allocator
    build:
      args:
        SERVICE_NAME: autonomous_allocator
    volumes:
      - trades-db:/app/shared:rw
    ports:
      - "127.0.0.1:9092:9090"
    depends_on:
      redis:
        condition: service_healthy
      executor:
        condition: service_healthy

  risk_guardian:
    <<: *rust-common
    container_name: memesnipe-risk
    build:
      args:
        SERVICE_NAME: risk_guardian
    volumes:
      - trades-db:/app/shared:ro
    ports:
      - "127.0.0.1:9093:9090"
    depends_on:
      redis:
        condition: service_healthy

  position_manager:
    <<: *rust-common
    container_name: memesnipe-positions
    build:
      args:
        SERVICE_NAME: position_manager
    volumes:
      - trades-db:/app/shared:rw
    ports:
      - "127.0.0.1:9094:9090"
    depends_on:
      redis:
        condition: service_healthy
      executor:
        condition: service_healthy

  wallet_guard:
    <<: *rust-common
    container_name: memesnipe-wallet-guard
    build:
      args:
        SERVICE_NAME: wallet_guard
    ports:
      - "127.0.0.1:9095:9090"
    depends_on:
      redis:
        condition: service_healthy

  signer:
    <<: *rust-common
    container_name: memesnipe-signer
    build:
      args:
        SERVICE_NAME: signer
    volumes:
      - ./my_wallet.json:/app/my_wallet.json:ro
      - ./jito_auth_key.json:/app/jito_auth_key.json:ro
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - WALLET_PATH=/app/my_wallet.json
      - JITO_AUTH_KEY_PATH=/app/jito_auth_key.json

  # Python Services
  data_consumers:
    <<: *python-common
    container_name: memesnipe-data
    build:
      context: ./data_consumers
    command: python -m data_consumers
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health').raise_for_status()"]
      interval: 30s
      timeout: 3s
      retries: 3

  strategy_factory:
    <<: *python-common
    container_name: memesnipe-factory
    build:
      context: ./strategy_factory
    command: python factory.py
    depends_on:
      redis:
        condition: service_healthy
      executor:
        condition: service_healthy

  dashboard:
    <<: *python-common
    container_name: memesnipe-dashboard
    build:
      context: ./dashboard
    command: gunicorn --bind 0.0.0.0:80 --workers 2 --timeout 30 app:app
    ports:
      - "127.0.0.1:80:80"
    volumes:
      - trades-db:/app/shared:ro
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Observability
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: memesnipe-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:rw
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - memesnipe
    restart: unless-stopped
    user: "65534:65534"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:10.2.3
    container_name: memesnipe-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_PORT=3000
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - memesnipe
    restart: unless-stopped
    user: "472"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.5'

networks:
  memesnipe:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  trades-db:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
