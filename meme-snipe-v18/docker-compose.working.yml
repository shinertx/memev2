x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

networks:
  backend:
    driver: bridge

volumes:
  redis_data:

services:
  # Reverse Proxy - Single URL Access Point
  nginx:
    image: nginx:alpine
    container_name: meme-snipe-nginx
    restart: unless-stopped
    ports:
      - "80:80"      # Main access point (single URL)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - backend
    depends_on:
      - dashboard
      - signer
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
    networks:
      - backend

  dashboard:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:dashboard
    restart: unless-stopped
    logging: *default-logging
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379
    ports:
      - "8080:5000"
    volumes:
      - ./shared:/app/shared
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  strategy_factory:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:strategy-factory
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  bridge_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=bridge
    command: ["python", "-u", "bridge_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  depth_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=depth
    command: ["python", "-u", "depth_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  funding_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=funding
    command: ["python", "-u", "funding_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  helius_rpc_price_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=helius_rpc_price
      - HELIUS_API_KEY=${HELIUS_API_KEY}
    command: ["python", "-u", "helius_rpc_price_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  onchain_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=onchain
      - HELIUS_API_KEY=${HELIUS_API_KEY}
    command: ["python", "-u", "onchain_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  signer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:signer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - RUST_BACKTRACE=1
      - WALLET_KEYPAIR_FILENAME=${WALLET_KEYPAIR_FILENAME:-my_wallet.json}
    volumes:
      - type: bind
        source: ./${WALLET_KEYPAIR_FILENAME:-my_wallet.json}
        target: /app/${WALLET_KEYPAIR_FILENAME:-my_wallet.json}
        read_only: true
    networks:
      - backend
    ports:
      - "8989:8989"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8989/pubkey"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  analysis:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    user: "0:0"  # Run as root to access shared files
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=analysis
      - DB_PATH=/app/shared/trades_v18.db
    command: ["python", "-u", "alpha_decay_monitor.py"]
    volumes:
      - ./shared:/app/shared
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  watchdog:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=watchdog
    command: ["python", "-u", "watchdog_service.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  risk_guardian:
    build: ./risk_guardian
    container_name: risk_guardian
    volumes:
      - ./shared:/app/shared
      - ./my_wallet.json:/app/my_wallet.json:ro
    environment:
      - REDIS_URL=redis://redis:6379
      - RUST_LOG=info
      - RISK_CHECK_INTERVAL_MS=1000
      - MAX_PORTFOLIO_DRAWDOWN=${MAX_PORTFOLIO_DRAWDOWN:-0.15}
      - MAX_POSITION_SIZE_USD=${MAX_POSITION_SIZE_USD:-10000}
      - DAILY_LOSS_LIMIT_USD=${DAILY_LOSS_LIMIT_USD:-5000}
    depends_on:
      - redis
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  wallet_guard:
    build: ./wallet_guard
    container_name: wallet_guard
    volumes:
      - ./my_wallet.json:/app/my_wallet.json:ro
      - ./shared:/app/shared:ro
    environment:
      - REDIS_URL=redis://redis:6379
      - RUST_LOG=info
      - MAX_DAILY_TRANSACTIONS=100
      - MAX_TRANSACTION_SIZE_SOL=10.0
    depends_on:
      - redis
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Note: Executor, Meta-Allocator, and Position Manager are disabled due to dependency issues
  # They need Rust 1.81+ and jito-searcher-client authentication
  # 
  # executor:
  #   # Disabled - requires Rust 1.81+ and jito auth
  # 
  # meta_allocator:
  #   # Disabled - requires Rust 1.81+ for ICU dependencies
  # 
  # position_manager:
  #   # Disabled - requires jito-searcher-client authentication

  # ============================================================================
  # MONITORING STACK - Full Prometheus/Grafana Integration
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus.rules.yml:/etc/prometheus/prometheus.rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  backend:
    driver: bridge
    internal: false  # Allow external internet access for API calls
  monitoring:
    driver: bridge

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  logs:
    driver: local
