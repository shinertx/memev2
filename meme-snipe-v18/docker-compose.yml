x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
    networks:
      - backend

  signer:
    build:
      context: .
      dockerfile: signer/Dockerfile
      cache_from:
        - ${DOCKER_REGISTRY:-local}/meme-snipe:signer-cache
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:signer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - RUST_BACKTRACE=1
      - WALLET_KEYPAIR_PATH=/app/secrets/wallet.json
    volumes:
      - type: bind
        source: ./${WALLET_KEYPAIR_FILENAME}
        target: /app/secrets/wallet.json
        read_only: true
    networks:
      - backend
    expose:
      - "8989"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8989/pubkey"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  strategy_factory:
    build:
      context: .
      dockerfile: strategy_factory/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:strategy-factory
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - backend

  autonomous_allocator:
    build:
      context: .
      dockerfile: Dockerfile.autonomous
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:autonomous-allocator
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - PAPER_TRADING_MODE=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - backend

  paper_trading_engine:
    build:
      context: .
      dockerfile: Dockerfile.paper-trading
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:paper-trading
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      redis:
        condition: service_healthy
      autonomous_allocator:
        condition: service_started
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - backend

  executor:
    build:
      context: .
      dockerfile: executor/Dockerfile
      cache_from:
        - ${DOCKER_REGISTRY:-local}/meme-snipe:executor-cache
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:executor
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      redis:
        condition: service_healthy
      signer:
        condition: service_healthy
      autonomous_allocator:
        condition: service_started
    ports:
      - "${EXECUTOR_METRICS_PORT:-9184}:9184"
      - "${EXECUTOR_PROMETHEUS_PORT:-9090}:9090"
    env_file: .env
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - RUST_BACKTRACE=1
      - JITO_AUTH_KEYPAIR_PATH=/app/secrets/jito.json
      - DATABASE_PATH=/app/data/trades.db
    volumes:
      - type: bind
        source: ./shared
        target: /app/data
      - type: bind
        source: ./${JITO_AUTH_KEYPAIR_FILENAME}
        target: /app/secrets/jito.json
        read_only: true
    networks:
      - backend
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9184/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # bridge_consumer:
#   build:
#     context: .
#     dockerfile: data_consumers/Dockerfile
#   image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
#   restart: unless-stopped
#   logging: *default-logging
#   command: ["python", "-u", "bridge_consumer.py"]
#   depends_on:
#     redis:
#       condition: service_healthy
#   env_file: .env
#   environment:
#     - PYTHONUNBUFFERED=1
#   networks:
#     - backend

  depth_consumer:
    build:
      context: .
      dockerfile: data_consumers/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    command: ["python", "-u", "depth_consumer.py"]
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"  # Expose metrics port
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - backend
      - monitoring

  funding_consumer:
    build:
      context: .
      dockerfile: data_consumers/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    command: ["python", "-u", "funding_consumer.py"]
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8002:8002"  # Expose metrics port
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - backend
      - monitoring

  helius_rpc_price_consumer:
    build:
      context: .
      dockerfile: data_consumers/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    command: ["python", "-u", "helius_rpc_price_consumer.py"]
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8004:8004"  # Expose metrics port
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - backend
      - monitoring

  onchain_consumer:
    build:
      context: .
      dockerfile: data_consumers/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    command: ["python", "-u", "onchain_consumer.py"]
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"  # Expose metrics port
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - backend
      - monitoring

  real_market_data_consumer:
    build:
      context: .
      dockerfile: data_consumers/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    command: ["python", "-u", "real_market_data_consumer.py"]
    depends_on:
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - type: bind
        source: ./shared
        target: /app/shared
    networks:
      - backend

  enhanced_price_consumer:
    build:
      context: .
      dockerfile: data_consumers/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    command: ["python", "-u", "enhanced_price_consumer.py"]
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8003:8003"  # Expose metrics port
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - ENABLE_API_FAILOVER=true
    volumes:
      - type: bind
        source: ./shared
        target: /app/shared
    networks:
      - backend
      - monitoring

  social_consumer:
    build:
      context: .
      dockerfile: data_consumers/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    command: ["python", "-u", "social_consumer.py"]
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8005:8005"  # Expose metrics port
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - backend
      - monitoring

  position_manager:
    build:
      context: .
      dockerfile: position_manager/Dockerfile
      cache_from:
        - ${DOCKER_REGISTRY:-local}/meme-snipe:position-manager-cache
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:position-manager
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      redis:
        condition: service_healthy
      executor:
        condition: service_healthy
      signer:
        condition: service_healthy
    env_file: .env
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - RUST_BACKTRACE=1
      - DATABASE_PATH=/app/data/trades.db
    volumes:
      - type: bind
        source: ./shared
        target: /app/data
    networks:
      - backend

  dashboard:
    build:
      context: .
      dockerfile: dashboard/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:dashboard
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      redis:
        condition: service_healthy
      executor:
        condition: service_started
    ports:
      - "${DASHBOARD_PORT:-8080}:5000"
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_PATH=/app/data/trades_v18.db
      - FLASK_ENV=production
    volumes:
      - type: bind
        source: ./shared
        target: /app/data
        read_only: true
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus.rules.yml:/etc/prometheus/prometheus.rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
      - backend

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
    depends_on:
      - prometheus

  analysis:
    build:
      context: .
      dockerfile: analysis/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:analysis
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - DB_PATH=/app/data/trades_v18.db
    volumes:
      - type: bind
        source: ./shared
        target: /app/data
      - type: volume
        source: logs
        target: /app/logs
    networks:
      - backend

  watchdog:
    build:
      context: .
      dockerfile: watchdog/Dockerfile
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:watchdog
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "8008:8008" # Prometheus metrics for watchdog
    depends_on:
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - backend
      - monitoring

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: false  # CHANGED: Allow external internet access for API calls
  monitoring:
    driver: bridge

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  logs:
    driver: local
