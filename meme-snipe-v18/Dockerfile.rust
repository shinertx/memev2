# Multi-stage Rust build with maximum optimization and security
ARG RUST_VERSION=1.75
ARG DEBIAN_VERSION=bookworm-slim

# Stage 1: Chef preparation for dependency caching
FROM rust:${RUST_VERSION}-slim AS chef
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*
RUN cargo install cargo-chef --version 0.1.62
WORKDIR /app

# Stage 2: Recipe planning for optimal caching
FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# Stage 3: Builder with all dependencies
FROM chef AS builder
# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    build-essential \
    cmake \
    clang \
    && rm -rf /var/lib/apt/lists/*

# Build dependencies separately for caching
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# Copy source and build with maximum optimization
COPY . .
ENV RUSTFLAGS="-C target-cpu=native -C opt-level=3 -C lto=fat -C panic=abort -C strip=symbols"
ENV CARGO_PROFILE_RELEASE_LTO=fat
ENV CARGO_PROFILE_RELEASE_PANIC=abort
ENV CARGO_PROFILE_RELEASE_OPT_LEVEL=3

# Build the specific service (passed as build arg)
ARG SERVICE_NAME
RUN cargo build --release --bin ${SERVICE_NAME}

# Stage 4: Runtime with minimal attack surface
FROM debian:${DEBIAN_VERSION}

# Install only runtime dependencies and jemalloc
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libjemalloc2 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy binary from builder
ARG SERVICE_NAME
COPY --from=builder --chown=appuser:appuser /app/target/release/${SERVICE_NAME} /app/${SERVICE_NAME}

# Set up shared directory for database
RUN mkdir -p /app/shared && chown -R appuser:appuser /app

# Switch to non-root user
USER appuser
WORKDIR /app

# Use jemalloc for better memory performance
ENV LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so.2

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:9090/health || exit 1

# Runtime command
ARG SERVICE_NAME
ENTRYPOINT ["/app/${SERVICE_NAME}"]
