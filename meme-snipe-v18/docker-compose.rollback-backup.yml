version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

networks:
  backend:
    driver: bridge

volumes:
  redis_data:

services:
  # Reverse Proxy - Single URL Access Point
  nginx:
    image: nginx:alpine
    container_name: meme-snipe-nginx
    restart: unless-stopped
    ports:
      - "80:80"      # Main access point (single URL)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - backend
    depends_on:
      - dashboard
      - signer
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
    networks:
      - backend

  dashboard:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:dashboard
    restart: unless-stopped
    logging: *default-logging
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  strategy_factory:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:strategy-factory
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  bridge_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=bridge
    command: ["python", "-u", "bridge_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  depth_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=depth
    command: ["python", "-u", "depth_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  funding_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=funding
    command: ["python", "-u", "funding_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  helius_rpc_price_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=helius_rpc_price
      - HELIUS_API_KEY=${HELIUS_API_KEY}
    command: ["python", "-u", "helius_rpc_price_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  onchain_consumer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:data-consumer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CONSUMER_TYPE=onchain
      - HELIUS_API_KEY=${HELIUS_API_KEY}
    command: ["python", "-u", "onchain_consumer.py"]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  signer:
    image: ${DOCKER_REGISTRY:-local}/meme-snipe:signer
    restart: unless-stopped
    logging: *default-logging
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - RUST_BACKTRACE=1
      - WALLET_KEYPAIR_FILENAME=${WALLET_KEYPAIR_FILENAME:-my_wallet.json}
    volumes:
      - type: bind
        source: ./${WALLET_KEYPAIR_FILENAME:-my_wallet.json}
        target: /app/${WALLET_KEYPAIR_FILENAME:-my_wallet.json}
        read_only: true
    networks:
      - backend
    expose:
      - "8989"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8989/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Note: Executor, Meta-Allocator, and Position Manager are disabled due to dependency issues
  # They need Rust 1.81+ and jito-searcher-client authentication
  # 
  # executor:
  #   # Disabled - requires Rust 1.81+ and jito auth
  # 
  # meta_allocator:
  #   # Disabled - requires Rust 1.81+ for ICU dependencies
  # 
  # position_manager:
  #   # Disabled - requires jito-searcher-client authentication
